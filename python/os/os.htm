<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head> <meta http-equiv="content-type" content="text/html; charset=utf-8"> <link rel="alternate" type="application/rss+xml" title="RSS" href="rss.xml"> <link rel="shortcut icon" href="/media/img/effbot.ico"> <link rel="stylesheet" href="/media/css/effbot-min.css" type="text/css" media="screen"> <link rel="stylesheet" href="/media/css/effbotprint-min.css" type="text/css" media="print"> <title>The os&nbsp;module</title> <script type="text/javascript">effbot_page_id=602;</script> </head> <body> <div id="doc2" class="yui-t2"> <div id="hd"> <!-- header --> </div> <!-- hd --> <div id="bd"> <!-- body --> <div id="yui-main"> <div class="yui-b"> <div class="content"><div class="yui-g"> <a href="http://effbot.org/librarybook/os.htm"><h1 class="maintitle" >The os&nbsp;module</h1></a> </div> <!-- yui-g --><div class="yui-ge"><div class="yui-u first"><p>This module provides a unified interface to a number of
operating system functions.</p><p>Most of the functions in this module are implemented by platform
specific modules, such as <b><a href="posix.htm">posix</a></b> and
<b><a href="nt.htm">nt</a></b>.
The <b>os</b> module automatically loads the right implementation
module when it is first imported.</p><h3 style="sect2">Working with files</h3><p>The built-in <b>open</b> function lets you create, open, and
modify files. This module adds those extra functions you need to
rename and remove files:</p><div class="example">
<b style="example">Example: Using the os
module to rename and remove files</b>
<pre>
# File: <a href="os-example-3.py">os-example-3.py</a>

import os
import string

def replace(file, search_for, replace_with):
    # replace strings in a text file

    back = os.path.splitext(file)[0] + ".bak"
    temp = os.path.splitext(file)[0] + ".tmp"

    try:
        # remove old temp file, if any
        os.remove(temp)
    except os.error:
        pass

    fi = open(file)
    fo = open(temp, "w")

    for s in fi.readlines():
        fo.write(string.replace(s, search_for, replace_with))

    fi.close()
    fo.close()

    try:
        # remove old backup file, if any
        os.remove(back)
    except os.error:
        pass

    # rename original to backup...
    os.rename(file, back)

    # ...and temporary to original
    os.rename(temp, file)

#
# try it out!

file = "samples/sample.txt"

replace(file, "hello", "tjena")
replace(file, "tjena", "hello")
</pre></div><h3 style="sect2">Working with directories</h3><p>The os module also contains a number of functions that work on
entire directories.</p><p>The <b>listdir</b> function returns a list of all filenames in
a given directory. The current and parent directory markers used on
Unix and Windows (<b>.</b> and <b>..</b>) are not included in
this list.</p><div class="example">
<b style="example">Example: Using the os
module to list the files in a directory</b>
<pre>
# File: <a href="os-example-5.py">os-example-5.py</a>

import os

for file in os.listdir("samples"):
    print file

</pre><pre class="computeroutput" moreinfo="NONE">
sample.au
sample.jpg
sample.wav
...
</pre></div><p>The <b>getcwd</b> and <b>chdir</b> functions are used to get
and set the current directory:</p><div class="example">
<b style="example">Example: Using the os
module to change the working directory</b>
<pre>
# File: <a href="os-example-4.py">os-example-4.py</a>

import os

# where are we?
cwd = os.getcwd()
print "1", cwd

# go down
os.chdir("samples")
print "2", os.getcwd()

# go back up
os.chdir(os.pardir)
print "3", os.getcwd()

</pre><pre class="computeroutput" moreinfo="NONE">
1 /ematter/librarybook
2 /ematter/librarybook/samples
3 /ematter/librarybook
</pre></div><p>The <b>makedirs</b> and <b>removedirs</b> functions are used
to create and remove directory hierarchies.</p><div class="example">
<b style="example">Example: Using the os
module to create and remove multiple directory levels</b>
<pre>
# File: <a href="os-example-6.py">os-example-6.py</a>

import os

os.makedirs("test/multiple/levels")

fp = open("test/multiple/levels/file", "w")
fp.write("inspector praline")
fp.close()

# remove the file
os.remove("test/multiple/levels/file")

# and all empty directories above it
os.removedirs("test/multiple/levels")
</pre></div><p>Note that <b>removedirs</b> removes all empty directories
along the given path, starting with the last directory in the given
path name. In contrast, the <b>mkdir</b> and <b>rmdir</b>
functions can only handle a single directory level.</p><div class="example">
<b style="example">Example: Using the os
module to create and remove directories</b>
<pre>
# File: <a href="os-example-7.py">os-example-7.py</a>

import os

os.mkdir("test")
os.rmdir("test")

os.rmdir("samples") # this will fail

</pre><pre class="computeroutput" moreinfo="NONE">
Traceback (innermost last):
  File "os-example-7", line 6, in ?
OSError: [Errno 41] Directory not empty: 'samples'
</pre></div><p>To remove non-empty directories, you can use the <b>rmtree</b>
function in the <b><a href="shutil.htm">shutil</a></b> module.</p><h3 style="sect2">Working with file attributes</h3><p>The <b>stat</b> function fetches information about an existing
file. It returns a 9-tuple which contains the size, inode change
timestamp, modification timestamp, and access privileges.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the os
module to get information about a file</b>
<pre class="wide">
# File: <a href="os-example-1.py">os-example-1.py</a>

import os
import time

file = "samples/sample.jpg"

def dump(st):
    mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime = st
    print "- size:", size, "bytes"
    print "- owner:", uid, gid
    print "- created:", time.ctime(ctime)
    print "- last accessed:", time.ctime(atime)
    print "- last modified:", time.ctime(mtime)
    print "- mode:", oct(mode)
    print "- inode/dev:", ino, dev

#
# get stats for a filename

st = os.stat(file)

print "stat", file
dump(st)
print

#
# get stats for an open file

fp = open(file)

st = os.fstat(fp.fileno())

print "fstat", file
dump(st)

</pre><pre class="computeroutput wide" moreinfo="NONE">
stat samples/sample.jpg
- size: 4762 bytes
- owner: 0 0
- created: Tue Sep 07 22:45:58 1999
- last accessed: Sun Sep 19 00:00:00 1999
- last modified: Sun May 19 01:42:16 1996
- mode: 0100666
- inode/dev: 0 2

fstat samples/sample.jpg
- size: 4762 bytes
- owner: 0 0
- created: Tue Sep 07 22:45:58 1999
- last accessed: Sun Sep 19 00:00:00 1999
- last modified: Sun May 19 01:42:16 1996
- mode: 0100666
- inode/dev: 0 0
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>Some fields don&#8217;t make sense on non-Unix platforms; for example,
the (inode, dev) tuple provides a unique identity for each file on
Unix, but can contain arbitrary data on other platforms.</p><p>The <b><a href="stat.htm">stat</a></b>
module contains a number of useful constants and helper functions
for dealing with the members of the stat tuple. Some of these are
shown in the examples below.</p><p>You can modify the mode and time fields using the <b>chmod</b>
and <b>utime</b> functions:</p><div class="example">
<b style="example">Example: Using the os
module to change a file&#8217;s privileges and timestamps</b>
<pre>
# File: <a href="os-example-2.py">os-example-2.py</a>

import os
import stat, time

infile = "samples/sample.jpg"
outfile = "out.jpg"

# copy contents
fi = open(infile, "rb")
fo = open(outfile, "wb")

while 1:
    s = fi.read(10000)
    if not s:
        break
    fo.write(s)

fi.close()
fo.close()

# copy mode and timestamp
st = os.stat(infile)
os.chmod(outfile, stat.S_IMODE(st[stat.ST_MODE]))
os.utime(outfile, (st[stat.ST_ATIME], st[stat.ST_MTIME]))

print "original", "=&gt;"
print "mode", oct(stat.S_IMODE(st[stat.ST_MODE]))
print "atime", time.ctime(st[stat.ST_ATIME])
print "mtime", time.ctime(st[stat.ST_MTIME])

print "copy", "=&gt;"
st = os.stat(outfile)
print "mode", oct(stat.S_IMODE(st[stat.ST_MODE]))
print "atime", time.ctime(st[stat.ST_ATIME])
print "mtime", time.ctime(st[stat.ST_MTIME])

</pre><pre class="computeroutput" moreinfo="NONE">
original =&gt;
mode 0666
atime Thu Oct 14 15:15:50 1999
mtime Mon Nov 13 15:42:36 1995
copy =&gt;
mode 0666
atime Thu Oct 14 15:15:50 1999
mtime Mon Nov 13 15:42:36 1995
</pre></div><h3 style="sect2">Working with processes</h3><p>The <b>system</b> function runs a new command under the
current process, and waits for it to finish.</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using the os
module to run an operating system command</b>
<pre class="wide">
# File: <a href="os-example-8.py">os-example-8.py</a>

import os

if os.name == "nt":
    command = "dir"
else:
    command = "ls -l"

os.system(command)

</pre><pre class="computeroutput wide" moreinfo="NONE">
-rwxrw-r--   1 effbot  effbot        76 Oct  9 14:17 README
-rwxrw-r--   1 effbot  effbot      1727 Oct  7 19:00 SimpleAsyncHTTP.py
-rwxrw-r--   1 effbot  effbot       314 Oct  7 20:29 aifc-example-1.py
-rwxrw-r--   1 effbot  effbot       259 Oct  7 20:38 anydbm-example-1.py
...
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>The command is run via the operating system&#8217;s standard shell,
and returns the shell&#8217;s exit status. Under Windows 95/98, the shell
is usually <b>command.com</b> whose exit status is always 0.</p><p class="note"><b>Warning:</b>
Since <b>os.system</b> passes the command on to the shell as
is, it can be dangerous to use if you don&#8217;t check the arguments
carefully (consider running <b>os.system(&#8220;viewer %s&#8221; % file)</b>
with the file variable set to <b>&#8220;sample.jpg; rm -rf $HOME&#8221;</b>).
When unsure, it&#8217;s usually better to use <b>exec</b> or
<b>spawn</b> instead (see below).</p><p>The <b>exec</b> function starts a new process, replacing the
current one (<span>&#8220;go to process&#8221;</span>, in other words). In the
following example, note that the <span>&#8220;goodbye&#8221;</span> message is
never printed:</p><div class="example">
<b style="example">Example: Using the os
module to start a new process</b>
<pre>
# File: <a href="os-exec-example-1.py">os-exec-example-1.py</a>

import os
import sys

program = "python"
arguments = ["hello.py"]

print os.execvp(program, (program,) +  tuple(arguments))
print "goodbye"

</pre><pre class="computeroutput" moreinfo="NONE">
hello again, and welcome to the show
</pre></div><p>Python provides a whole bunch of <b>exec</b> functions, with
slightly varying behavior. The above example uses <b>execvp</b>,
which searches for the program along the standard path, passes the
contents of the second argument tuple as individual arguments to
that program, and runs it with the current set of environment
variables. See the <i><a href="#python-library-reference-book">Python Library Reference</a></i>
for more information on the other seven ways to call this
function.</p><p>Under Unix, you can call other programs from the current one by
combining <b>exec</b> with two other functions, <b>fork</b> and
<b>wait</b>. The former makes a copy of the current process, the
latter waits for a child process to finish.</p><div class="example">
<b style="example">Example: Using the os
module to run another program (Unix)</b>
<pre>
# File: <a href="os-exec-example-2.py">os-exec-example-2.py</a>

import os
import sys

def run(program, *args):
    pid = os.fork()
    if not pid:
        os.execvp(program, (program,) +  args)
    return os.wait()[0]

run("python", "hello.py")

print "goodbye"

</pre><pre class="computeroutput" moreinfo="NONE">
hello again, and welcome to the show
goodbye
</pre></div><p>The <b>fork</b> returns zero in the new process (the return
from <b>fork</b> is the first thing that happens in that
process!), and a non-zero process identifier in the original
process. Or in other words, <span>&#8220;<b>not pid</b>&#8221;</span> is true
only if we&#8217;re in the new process.</p><p>
<b>fork</b> and <b>wait</b> are not available on Windows,
but you can use the <b>spawn</b> function instead. Unfortunately,
there&#8217;s no standard version of <b>spawn</b> that searches for an
executable along the path, so you have to do that yourself:</p><div class="example">
<b style="example">Example: Using the os
module to run another program (Windows)</b>
<pre>
# File: <a href="os-spawn-example-1.py">os-spawn-example-1.py</a>

import os
import string

def run(program, *args):
    # find executable
    for path in string.split(os.environ["PATH"], os.pathsep):
        file = os.path.join(path, program) + ".exe"
        try:
            return os.spawnv(os.P_WAIT, file, (file,) + args)
        except os.error:
            pass
    raise os.error, "cannot find executable"

run("python", "hello.py")

print "goodbye"

</pre><pre class="computeroutput" moreinfo="NONE">
hello again, and welcome to the show
goodbye
</pre></div><p>You can also use <b>spawn</b> to run other programs in the
background. The following example adds an optional <b>mode</b>
argument to the <b>run</b> function; when set to
<b>os.P_NOWAIT</b>, the script doesn&#8217;t wait for the other program
to finish.</p><p>The default flag value <b>os.P_WAIT</b> tells <b>spawn</b>
to wait until the new process is finished. Other flags include
<b>os.P_OVERLAY</b> which makes <b>spawn</b> behave like
<b>exec</b>, and <b>os.P_DETACH</b> which runs the new process
in the background, detached from both console and keyboard.</p><div class="example">
<b style="example">Example: Using the os
module to run another program in the background (Windows)</b>
<pre>
# File: <a href="os-spawn-example-2.py">os-spawn-example-2.py</a>

import os
import string

def run(program, *args, **kw):
    # find executable
    mode = kw.get("mode", os.P_WAIT)
    for path in string.split(os.environ["PATH"], os.pathsep):
        file = os.path.join(path, program) + ".exe"
        try:
            return os.spawnv(mode, file, (file,) + args)
        except os.error:
            pass
    raise os.error, "cannot find executable"

run("python", "hello.py", mode=os.P_NOWAIT)
print "goodbye"

</pre><pre class="computeroutput" moreinfo="NONE">
goodbye
hello again, and welcome to the show
</pre></div><p>The following example provides a <b>spawn</b> method that
works on either platform:</p></div><div class="yui-u">&#160;</div></div><div class="yui-g"><div class="example wide">
<b style="example">Example: Using either spawn
or fork/exec to run another program</b>
<pre class="wide">
# File: <a href="os-spawn-example-3.py">os-spawn-example-3.py</a>

import os
import string

if os.name in ("nt", "dos"):
    exefile = ".exe"
else:
    exefile = ""

def spawn(program, *args):
    try:
        # check if the os module provides a shortcut
        return os.spawnvp(program, (program,) + args)
    except AttributeError:
        pass
    try:
        spawnv = os.spawnv
    except AttributeError:
        # assume it's unix
        pid = os.fork()
        if not pid:
            os.execvp(program, (program,) + args)
        return os.wait()[0]
    else:
        # got spawnv but no spawnp: go look for an executable
        for path in string.split(os.environ["PATH"], os.pathsep):
            file = os.path.join(path, program) + exefile
            try:
                return spawnv(os.P_WAIT, file, (file,) + args)
            except os.error:
                pass
        raise IOError, "cannot find executable"

#
# try it out!

spawn("python", "hello.py")

print "goodbye"

</pre><pre class="computeroutput wide" moreinfo="NONE">
hello again, and welcome to the show
goodbye
</pre></div></div><div class="yui-ge"><div class="yui-u first"><p>The above example first attempts to call a function named
<b>spawnvp</b>. If that doesn&#8217;t exist (it doesn&#8217;t, in 2.0 and
earlier), the function looks for a function named <b>spawnv</b>
and searches the path all by itself. As a last resort, it falls
back on <b>exec</b> and <b>fork</b>.</p><h3 style="sect2">Working with daemon processes</h3><p>On Unix, <b>fork</b> can also be used to turn the current
process into a background process (a <span>&#8220;daemon&#8221;</span>).
Basically, all you need to do is to fork off a copy of the current
process, and terminate the original process:</p><div class="example">
<b style="example">Example: Using the os
module to run as daemon (Unix)</b>
<pre>
# File: <a href="os-example-14.py">os-example-14.py</a>

import os
import time

pid = os.fork()
if pid:
    os._exit(0) # kill original

print "daemon started"
time.sleep(10)
print "daemon terminated"
</pre></div><p>However, it takes a bit more work to create a real daemon.
First, call <b>setpgrp</b> to make the new process a
<span>&#8220;process group leader&#8221;</span>. Otherwise, signals sent to a
(by that time) unrelated process group might cause problems in your
daemon:</p><pre>
os.setpgrp()
</pre><p>It&#8217;s also a good idea to remove the user mode mask, to make sure
files created by the daemon actually gets the mode flags specified
by the program:</p><pre>
os.umask(0)
</pre><p>Then, you should redirect the stdout/stderr files, instead of
just closing them. If you don&#8217;t do this, you may get unexpected
exceptions the day some of your code tries to write something to
the console via stdout or stderr.</p><pre>
class NullDevice:
    def write(self, s):
        pass

sys.stdin.close()
sys.stdout = NullDevice()
sys.stderr = NullDevice()
</pre><p>In other words, while Python&#8217;s <b>print</b> and C&#8217;s
<b>printf/fprintf</b> won&#8217;t crash your program if the devices
have been disconnected, <b>sys.stdout.write()</b> happily throws
an <b>IOError</b> exception when the application runs as a
daemon. But your program works just fine when running in the
foreground&#8230;</p><p>By the way, the <b>_exit</b> function used in the examples
above terminates the current process. In contrast to
<b>sys.exit</b>, this works also if the caller happens to catch
the <b>SystemExit</b> exception:</p><div class="example">
<b style="example">Example: Using the os
module to exit the current process</b>
<pre>
# File: <a href="os-example-9.py">os-example-9.py</a>

import os
import sys

try:
    sys.exit(1)
except SystemExit, value:
    print "caught exit(%s)" % value

try:
    os._exit(2)
except SystemExit, value:
    print "caught exit(%s)" % value

print "bye!"

</pre><pre class="computeroutput" moreinfo="NONE">
caught exit(1)
</pre></div></div><div class="yui-u">&#160;</div></div><p>[<a href="http://effbot.slinkset.com/items/The_Standard_Python_Library">comment on/vote for this article</a>]</p> <div class="yui-g"><div class='comment' target-id='None' timestamp='1166753676.6'>
 <p><b>Comment:</b></p>
 <p>Thank you!!!

Your clear examples saved me many minutes (hours?), working out the subtlety of the spawn syntax. Since I write cross-platform code, I really appreciated the complete coverage that your examples provided.

Incidentally, I also thought your code was clean, clear, and efficient.</p>
 <p>Posted by <b class='author'>Rick S.</b> <span class='mark'>(2006-12-22)</span></p>
</div>
</div> <!-- yui-g --></div> <!-- content --> </div> <!-- yui-b --> </div> <!-- yui-main --> <div class="yui-b"> <div id='menu'> <ul> <li><b><a href="/" title="Go to effbot.org.">::: effbot.org</a></b></li> <li><b><a href="." title="Go to librarybook index page.">::: librarybook :::</a></b></li> <li><b><a href="http://effbot.slinkset.com/items/The_Standard_Python_Library" title="Comment on or vote for this article.">::: comments :::</a></b></li> </ul> </div> <!-- menu --> </div> <!-- yui-b --> </div> <!-- bd --> <div id="ft"> <!-- footer --> <p><a href="http://www.djangoproject.com/"><img src="/media/img/djangosite80x15.gif" border="0" alt="A Django site." title="A Django site." style="vertical-align: bottom;"></a>
this page was rendered by a <a href="http://www.djangoproject.com/">django</a> application in 0.02s 2012-02-02 05:43:03.932788.  hosted by <a href="http://www.webfaction.com/shared_hosting?affiliate=slab">webfaction</a>.</p> </div> <!-- ft --> </div> <!-- doc --> <script src="/media/js/effbot-min.js" type="text/javascript"> </script> </body> </html>
