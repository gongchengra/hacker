设计模式 ( 十三 ) 命令模式Command（对象行为型）

http://blog.csdn.net/hguisu/article/details/7549895

1.概述

在软件设计中，我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。

例子1：电视机遥控器 : 遥控器是请求的发送者，电视机是请求的接收者，遥控器上有一些按钮如开，关,换频道等按钮就是具体命令，不同的按钮对应电视机的不同操作。

2.问题

在软件系统中，“行为请求者”与“行为实现者”通常呈现一种“紧耦合”。但在某些场合，比如要对行为进行“记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将“行为请求者”与“行为实现者”解耦？

3.解决方案

命令模式(Command Pattern)：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式又称为动作(Action)模式或事务(Transaction)模式。（Command Pattern: Encapsulate a request as an object, thereby letting you parameterize clients with different requests,queue or log requests,and support undoable operations. ）

4.适用性

1）系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。

2）系统需要在不同的时间指定请求、将请求排队和执行请求。

3）系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。

4）系统需要将一组操作组合在一起，即支持宏命令。

5.结构

6.模式的组成

抽象命令类(Command): 声明执行操作的接口。调用接收者相应的操作，以实现执行的方法Execute。

具体命令类(ConcreteCommand): 创建一个具体命令对象并设定它的接收者。通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。

调用者(Invoker): 要求该命令执行这个请求。通常会持有命令对象，可以持有很多的命令对象。

接收者(Receiver): 知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者,只要它能够实现命令要求实现的相应功能。

客户类(Client): 创建具体的命令对象，并且设置命令对象的接收者。真正使用命令的客户端是从Invoker来触发执行。

7.效果

Command模式优点：

1) 降低系统的耦合度:Command模式将调用操作的对象与知道如何实现该操作的对象解耦。

2) Command是头等的对象。它们可像其他的对象一样被操纵和扩展。

3) 组合命令:你可将多个命令装配成一个组合命令，即可以比较容易地设计一个命令队列和宏命令。一般说来，组合命令是Composite模式的一个实例。

4) 增加新的Command很容易，因为这无需改变已有的类。

5）可以方便地实现对请求的Undo和Redo。

命令模式的缺点：

使用命令模式可能会导致某些系统有过多的具体命令类。因为针对每一个命令都需要设计一个具体命令类，因此某些系统可能需要大量具体命令类，这将影响命令模式的使用。

8.实现

电视机遥控器 :

电视机是请求的接收者，

遥控器是请求的发送者，

遥控器上有一些按钮，不同的按钮对应电视机的不同操作。抽象命令角色由一个命令接口来扮演，

有三个具体的命令类实现了抽象命令接口，这三个具体命令类分别代表三种操作：打开电视机、关闭电视机和切换频道。

显然，电视机遥控器就是一个典型的命令模式应用实例。

```
<?php
/**
 * 电视机遥控器 :
 电视机是请求的接收者，
 遥控器是请求的发送者，
 遥控器上有一些按钮，不同的按钮对应电视机的不同操作。抽象命令角色由一个命令接口来扮演，
 有三个具体的命令类实现了抽象命令接口，这三个具体命令类分别代表三种操作：打开电视机、关闭电视机和切换频道。
 显然，电视机遥控器就是一个典型的命令模式应用实例。
 */
/**
 * The Command abstraction( 命令接口，声明执行的操作).
 * In this case the implementation must return a result,
 * sometimes it only has side effects.
 */
interface ICommand
{
    /**
     * 执行命令对应的操作
     *
     * @param unknown_type $name
     * @param unknown_type $args
     */
    function execute();
}
/**
 * ConcreteCommand具体的命令实现对象:打开命令
 */
class ConcreteCommandOpen implements ICommand {
    /**
     * 持有相应的接收者对象
     */
    private  $_receiverTV = null; //
    /**
     * 示意，命令对象可以有自己的状态
     */
    private  $_state;
    /**
     * 构造方法，传入相应的接收者对象
     * @param receiver 相应的接收者对象
     */
    public function  __construct($receiver){
        $this->_receiverTV = $receiver;
    }
    public function execute() {
        //通常会转调接收者对象的相应方法，让接收者来真正执行功能
        $this->_receiverTV->actionOpen();
    }
}
/**
 * ConcreteCommand具体的命令实现对象：关闭
 */
class ConcreteCommandClose implements ICommand {
    /**
     * 持有相应的接收者对象
     */
    private  $_receiverTV = null; //
    /**
     * 示意，命令对象可以有自己的状态
     */
    private  $_state;
    /**
     * 构造方法，传入相应的接收者对象
     * @param receiver 相应的接收者对象
     */
    public function  __construct($receiver){
        $this->_receiverTV = $receiver;
    }
    public function execute() {
        //通常会转调接收者对象的相应方法，让接收者来真正执行功能
        $this->_receiverTV->actionClose();
    }
}
/**
 * ConcreteCommand具体的命令实现对象：换频道
 */
class ConcreteCommandChange implements ICommand {
    /**
     * 持有相应的接收者对象
     */
    private  $_receiverTV = null; //
    /**
     * 示意，命令对象可以有自己的状态
     */
    private  $_state;
    /**
     * 构造方法，传入相应的接收者对象
     * @param receiver 相应的接收者对象
     */
    public function  __construct($receiver){
        $this->_receiverTV = $receiver;
    }
    public function execute() {
        //通常会转调接收者对象的相应方法，让接收者来真正执行功能
        $this->_receiverTV->actionChange();
    }
}
/**
 * 接收者对象
 */
class ReceiverTV {
    /**
     * 真正执行命令相应的打开操作
     */
    public function actionOpen(){
        echo 'actionOpen<br/>';
    }
    /**
     * 真正执行命令相应的关闭操作
     */
    public function actionClose(){
        echo 'actionClose<br/>';
    }
    /**
     *  真正执行命令相应的换频道操作
     */
    public function actionChange(){
        echo 'actionChange<br/>';
    }
}
/**
 * 调用者Invoker:遥控器
 */
class InvokerControler {
    /**
     * 持有命令对象
     */
    private $_commands = null; //ICommand
    /**
     * 设置调用者持有的命令对象
     * @param command 命令对象
     */
    public function addCommand($command) {
        $classname = get_class($command);
        $this->_commands[$classname] = $command;
    }
    /**
     * 示意方法，要求命令执行请求
     */
    public function runCommand($cmdName) {
        //调用命令对象的执行方法
        $this->_commands[$cmdName]->execute();
    }
}
class Client {
    /**
     * 示意，负责创建命令对象，并设定它的接收者
     */
    public static  function main(){
        //创建电视接收者
        $receiver = new ReceiverTV();
        //创建Invoker
        $invoker = new InvokerControler();
        //创建命令对象，设定它的接收者
        $commandOpen = new ConcreteCommandOpen($receiver);
        //把命令对象设置进调用遥控器
        $invoker->addCommand($commandOpen);
        //执行打开命令
        $invoker->runCommand(get_class($commandOpen));
    }
}
Client::main();
?>
```
UML图：

宏命令又称为组合命令，它是命令模式和组合模式联用的产物：

宏命令也是一个具体命令，不过它包含了对其他命令对象的引用，在调用宏命令的execute()方法时，将递归调用它所包含的每个成员命令的execute()方法，一个宏命令的成员对象可以是简单命令，还可以继续是宏命令。执行一个宏命令将执行多个具体命令，从而实现对命令的批处理。

Ÿ

9.与其他相关模式

1）Composite模式（可被用来实现宏命令。

2）备忘录Memento模式可用来保持某个状态，命令用这一状态来取消它的效果。在被放入历史表列前必须被拷贝的命令起到一种原型的作用。

10.总结与分析

1）命令模式的本质是对命令进行封装，将发出命令的责任和执行命令的责任分割开。

2）每一个命令都是一个操作：请求的一方发出请求，要求执行一个操作；接收的一方收到请求，并执行操作

3）命令模式允许请求的一方和接收的一方独立开来，使得请求的一方不必知道接收请求的一方的接口，更不必知道请求是怎么被接收，以及操作是否被执行、何时被执       行，以及是怎么被执行的。

4）命令模式使请求本身成为一个对象，这个对象和其他对象一样可以被存储和传递。

5）命令模式的关键在于引入了抽象命令接口，且发送者针对抽象命令接口编程，只有实现了抽象命令接口的具体命令才能与接收者相关联。

